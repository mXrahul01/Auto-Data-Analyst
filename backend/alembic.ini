# =============================================================================
# AUTO-ANALYST PLATFORM - ALEMBIC CONFIGURATION
# =============================================================================
#
# Production-ready Alembic configuration with multi-environment support,
# proper security settings, and optimized for deployment platforms like Render.com
#
# Key Features:
# - Environment-based configuration management
# - Multi-database support (PostgreSQL, MySQL, SQLite)
# - Production-grade security and SSL settings
# - Proper logging configuration for all environments
# - Optimized connection pooling and timeouts
# - Clear migration file naming and organization
#
# Usage:
#   Development: alembic upgrade head
#   Production:  alembic -x environment=production upgrade head
#   Testing:     alembic -x environment=testing upgrade head
#
# =============================================================================

[alembic]
# =============================================================================
# CORE ALEMBIC CONFIGURATION
# =============================================================================

# Path to migration scripts directory
script_location = backend/models/migrations

# Migration file naming template (simplified for clarity)
# Format: YYYYMMDD_HHMM_revision_slug
file_template = %%(year)d%%(month).2d%%(day).2d_%%(hour).2d%%(minute).2d_%%(rev)s_%%(slug)s

# Timezone for migration timestamps (use UTC for consistency across deployments)
timezone = UTC

# Maximum length for migration file slug (keep reasonable for file systems)
truncate_slug_length = 40

# Whether to run environment setup during revision creation
# Set to false for faster revision generation
revision_environment = false

# Allow .pyc files without source (useful for production deployments)
sourceless = false

# Version path length (affects revision ID generation)
version_locations = %(here)s/backend/models/migrations/versions

# Output encoding for migration files
output_encoding = utf-8

# =============================================================================
# DATABASE CONNECTION CONFIGURATION
# =============================================================================

# Default database URL (will be overridden by environment variables)
# This serves as a template and fallback for development
sqlalchemy.url = driver://user:pass@localhost/dbname

# =============================================================================
# CONNECTION POOL SETTINGS
# =============================================================================

# Enable connection health checks (important for cloud deployments)
sqlalchemy.pool_pre_ping = true

# Connection pool recycle time (5 minutes - good for cloud platforms)
sqlalchemy.pool_recycle = 300

# Pool size settings (optimized for web application usage)
sqlalchemy.pool_size = 5
sqlalchemy.max_overflow = 10
sqlalchemy.pool_timeout = 30

# Connection timeout for slow networks
sqlalchemy.connect_timeout = 60

# =============================================================================
# POSTGRESQL SPECIFIC SETTINGS
# =============================================================================

# PostgreSQL schema configuration
# Set search_path to public schema by default
postgresql.search_path = public

# PostgreSQL client encoding
postgresql.client_encoding = utf8

# PostgreSQL timezone setting
postgresql.timezone = UTC

# =============================================================================
# SSL/TLS SECURITY SETTINGS
# =============================================================================

# SSL mode for production deployments (overridden by environment)
# Options: disable, allow, prefer, require, verify-ca, verify-full
postgresql.sslmode = prefer

# SSL certificate verification (for production)
postgresql.sslcert = 
postgresql.sslkey = 
postgresql.sslrootcert = 

# =============================================================================
# MIGRATION EXECUTION SETTINGS
# =============================================================================

# Transaction mode for migrations
# Options: per_migration, all_at_once
# per_migration is safer for production
transaction_per_migration = true

# Whether to create migration lock during execution
# Prevents concurrent migrations in multi-instance deployments
migration_lock = true

# Maximum time to wait for migration lock (seconds)
migration_lock_timeout = 300

# Compare types during autogenerate (detect column type changes)
compare_type = true

# Compare server defaults during autogenerate
compare_server_default = true

# Include schemas in autogenerate operations
include_schemas = true

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================

[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console,file

[formatters]
keys = generic,detailed

# Root logger configuration
[logger_root]
level = INFO
handlers = console
qualname =

# SQLAlchemy logger (controls SQL query logging)
[logger_sqlalchemy]
level = WARN
handlers = 
qualname = sqlalchemy.engine
# Set to INFO to see all SQL queries (useful for debugging)
# Set to WARN for production to reduce log noise

# Alembic logger (controls migration logging)
[logger_alembic]
level = INFO
handlers = 
qualname = alembic

# Console handler for development and Docker environments
[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

# File handler for production logging
[handler_file]
class = FileHandler
args = ('logs/alembic.log',)
level = NOTSET
formatter = detailed

# Simple formatter for console output
[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S

# Detailed formatter for file logging
[formatter_detailed]
format = %(asctime)s %(levelname)-5.5s [%(name)s] %(filename)s:%(lineno)d - %(message)s
datefmt = %Y-%m-%d %H:%M:%S

# =============================================================================
# ENVIRONMENT-SPECIFIC CONFIGURATIONS
# =============================================================================

# Development environment settings
[alembic:development]
# Enable SQL query logging for development
sqlalchemy.echo = true

# Use SQLite for local development (fast and simple)
sqlalchemy.url = sqlite:///./auto_analyst_dev.db

# Relaxed SSL settings for local development
postgresql.sslmode = disable

# More verbose logging for development
[logger_root:development]
level = DEBUG

[logger_sqlalchemy:development]
level = INFO

# Staging environment settings
[alembic:staging]
# Minimal logging for staging
sqlalchemy.echo = false

# Require SSL for staging environment
postgresql.sslmode = require

# Production-like pool settings
sqlalchemy.pool_size = 8
sqlalchemy.max_overflow = 15

# Production environment settings
[alembic:production]
# No SQL echo in production (performance and security)
sqlalchemy.echo = false

# Strict SSL requirements for production
postgresql.sslmode = require

# Optimized pool settings for production load
sqlalchemy.pool_size = 10
sqlalchemy.max_overflow = 20
sqlalchemy.pool_recycle = 300

# Production logging levels
[logger_root:production]
level = WARN

[logger_sqlalchemy:production]
level = WARN

[logger_alembic:production]
level = INFO

# Testing environment settings
[alembic:testing]
# Use in-memory SQLite for fast tests
sqlalchemy.url = sqlite:///:memory:

# No SSL for testing
postgresql.sslmode = disable

# Minimal pool settings for tests
sqlalchemy.pool_size = 1
sqlalchemy.max_overflow = 2

# Quiet logging for tests
sqlalchemy.echo = false

[logger_root:testing]
level = ERROR

# =============================================================================
# CLOUD PLATFORM OPTIMIZATIONS
# =============================================================================

# Render.com specific settings
[alembic:render]
# Render provides DATABASE_URL environment variable
# Connection will be configured in env.py

# Optimized for Render's infrastructure
sqlalchemy.pool_size = 5
sqlalchemy.max_overflow = 10
sqlalchemy.pool_recycle = 300
sqlalchemy.pool_pre_ping = true

# SSL required for Render PostgreSQL
postgresql.sslmode = require

# Heroku specific settings
[alembic:heroku]
# Heroku provides DATABASE_URL environment variable
# SSL required for Heroku PostgreSQL
postgresql.sslmode = require

# Optimized for Heroku's connection limits
sqlalchemy.pool_size = 3
sqlalchemy.max_overflow = 7
sqlalchemy.pool_recycle = 300

# Railway specific settings  
[alembic:railway]
# Railway provides DATABASE_URL environment variable
postgresql.sslmode = require

# Optimized for Railway's infrastructure
sqlalchemy.pool_size = 5
sqlalchemy.max_overflow = 10

# =============================================================================
# MIGRATION HOOKS AND EXTENSIONS
# =============================================================================

# Custom migration hooks (defined in env.py)
# These allow for custom logic during migrations

# Pre-migration hook (run before each migration)
# Can be used for backups, validations, etc.
pre_migration_hook = true

# Post-migration hook (run after each migration)
# Can be used for cleanup, notifications, etc.
post_migration_hook = true

# =============================================================================
# AUTOGENERATE CONFIGURATION
# =============================================================================

# Include object names in autogenerate operations
include_object = true

# Include symbol names in comparison
include_symbol = true

# Render item for autogenerate (custom item rendering)
render_item = true

# Compare metadata for changes
compare_metadata = true

# Process revision directives (custom revision processing)
process_revision_directives = true

# =============================================================================
# ADVANCED SETTINGS
# =============================================================================

# Whether to truncate long identifier names
truncate_names = true

# Version table name (default is 'alembic_version')
version_table = alembic_version

# Version table schema (use None for default schema)
version_table_schema = None

# Whether to use batch operations for SQLite
# Enables ALTER TABLE operations on SQLite
render_as_batch = false

# Batch alter table settings for SQLite compatibility
batch_alter_table = true

# =============================================================================
# CUSTOM CONFIGURATION OPTIONS
# =============================================================================

# Application-specific settings that can be accessed in env.py
[app:auto_analyst]
# Application version for migration tracking
app_version = 2.0.0

# Migration environment identifier
migration_env = %(environment)s

# Database schema version
schema_version = 1.0

# Backup configuration
backup_enabled = true
backup_retention_days = 30

# Notification settings
notify_on_migration = true
notification_webhook = 

# =============================================================================
# USAGE EXAMPLES AND COMMANDS
# =============================================================================

# Common Alembic commands with environment support:
#
# Generate new migration:
#   alembic revision --autogenerate -m "Description of changes"
#
# Run migrations for specific environment:
#   alembic -x environment=production upgrade head
#   alembic -x environment=staging upgrade head
#   alembic -x environment=development upgrade head
#
# Rollback to specific revision:
#   alembic downgrade <revision_id>
#
# Show current database version:
#   alembic current
#
# Show migration history:
#   alembic history --verbose
#
# Show difference between current and head:
#   alembic show head
#
# Validate current revision:
#   alembic check
#
# =============================================================================
